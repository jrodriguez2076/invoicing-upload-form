version: '1.0'
stages:
  - clone
  - build
  - test
  - deploy
steps:
  main_clone:
    title: Clone repository
    stage: clone
    type: git-clone
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    revision: ${{CF_SHORT_REVISION}}
    git: github
  setup_github_token:
    title: Setup GitHub token
    stage: clone
    image: codefresh/cli
    commands:
      - echo GITHUB_TOKEN=$(codefresh get context github --decrypt -o yaml | yq -r .spec.data.auth.password) >> ${{CF_VOLUME_PATH}}/env_vars_to_export
  build_js_test:
    title: 'Build image: js-test'
    type: build
    stage: build
    image_name: ${{CF_REPO_NAME}}-js-test
    dockerfile: docker/nginx/Dockerfile
    target: DEVELOPMENT
    build_arguments:
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
    tag: ${{CF_SHORT_REVISION}}
  build_nginx:
    title: 'Build image: nginx'
    type: build
    stage: build
    image_name: ${{CF_REPO_NAME}}-nginx
    dockerfile: docker/nginx/Dockerfile
    build_arguments:
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
    tag: ${{CF_SHORT_REVISION}}
  export_nginx_image_temp:
    title: Export NGINX_IMAGE (temp until bug fixed)
    stage: build
    image: codefresh/cli
    commands:
      - cf_export NGINX_IMAGE=${{build_nginx.imageId}}
  build_php_test:
    title: 'Build image: php-test'
    type: build
    stage: build
    image_name: ${{CF_REPO_NAME}}-php-test
    dockerfile: docker/php/Dockerfile
    target: DEVELOPMENT
    build_arguments:
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - NGINX_IMAGE=${{NGINX_IMAGE}}
    tag: ${{CF_SHORT_REVISION}}
  build_php:
    title: 'Build image: php'
    type: build
    stage: build
    image_name: ${{CF_REPO_NAME}}-php
    dockerfile: docker/php/Dockerfile
    build_arguments:
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - NGINX_IMAGE=${{NGINX_IMAGE}}
    tag: ${{CF_SHORT_REVISION}}
  tests:
    type: parallel
    title: Tests
    stage: test
    steps:
      lint_api:
        title: Lint JS
        image: ${{build_js_test}}
        working_directory: IMAGE_WORK_DIR
        commands:
          - yarn lint:check
      test_php:
        title: Run PHP tests
        image: ${{build_php_test}}
        working_directory: IMAGE_WORK_DIR
        commands:
          - composer test
  push:
    type: parallel
    title: Push images
    stage: deploy
    steps:
      push_nginx:
        title: 'Push image: nginx'
        type: push
        registry: gcr
        candidate: ${{build_nginx}}
        tags:
          - latest
          - ${{CF_SHORT_REVISION}}
      push_php:
        title: 'Push image: php'
        type: push
        registry: gcr
        candidate: ${{build_php}}
        tags:
          - latest
          - ${{CF_SHORT_REVISION}}
    when:
      branch:
        only:
          - master
      condition:
        all:
          isNotPr: 'includes("${{CF_PULL_REQUEST_NUMBER}}", "CF_PULL_REQUEST_NUMBER") == true'
  deploy_staging:
    title: Deploy to staging
    stage: deploy
    type: linioit/deploy-app
    arguments:
      APP: ${{CF_REPO_NAME}}
      VERSION: ${{CF_SHORT_REVISION}}
      LINIO_ENV: staging
      GCP_SERVICE_ACCOUNT_CREDENTIALS: ${{GCP_SERVICE_ACCOUNT_CREDENTIALS}}
      AWS_ACCESS_KEY_ID: ${{AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{AWS_SECRET_ACCESS_KEY}}
      PULUMI_ACCESS_TOKEN: ${{PULUMI_ACCESS_TOKEN}}
    when:
      branch:
        only:
          - master
      condition:
        all:
          isNotPr: 'includes("${{CF_PULL_REQUEST_NUMBER}}", "CF_PULL_REQUEST_NUMBER") == true'
